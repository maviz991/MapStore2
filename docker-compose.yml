# docker-compose.yml - VERSÃO CORRIGIDA E OTIMIZADA

services:
  postgres:
    build:
      context: ./docker/postgres/
    image: geosolutions-mapstore/postgis
    container_name: postgres
    restart: on-failure
    healthcheck:
      test: /usr/bin/pg_isready -U postgres
      interval: 5s
      timeout: 10s
      retries: 120
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: geostore
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5433:5432" # Exposto para podermos nos conectar com um cliente de DB se quisermos
    networks:
      - mapstore-network

  geoserver:
    image: kartoza/geoserver:2.21.2
    container_name: geoserver
    restart: on-failure
    volumes:
      - geoserver_data:/opt/geoserver/data_dir
    environment:
      - GEOSERVER_ADMIN_USER=admin
      - GEOSERVER_ADMIN_PASSWORD=geoserver
    # Não precisa expor a porta 8282, o proxy vai cuidar disso
    networks:
      - mapstore-network

  mapstore:
    build:
      context: .
      dockerfile: docker/mapstore/Dockerfile
    container_name: mapstore
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mapstore-network
    # =======================================================================
    # ===== CORREÇÃO #1: ADICIONANDO O VOLUME PARA O ARQUIVO DE CONFIGURAÇÃO =====
    # =======================================================================
    volumes:
      - ./docker/mapstore.conf:/usr/local/tomcat/webapps/mapstore/WEB-INF/classes/local-config.properties

  proxy:
    image: nginx:1.21-alpine
    container_name: proxy
    restart: on-failure
    # =======================================================================
    # ===== CORREÇÃO #2: USANDO A PORTA 80 PADRÃO PARA EVITAR CONFLITOS ====
    # =======================================================================
    ports:
      - "80:80" # O NGINX vai ouvir na porta 80 (padrão HTTP) do seu PC
      - "8282:8081" # Expondo a porta do GeoServer através do proxy
    volumes:
      - ./docker/proxy/conf.d:/etc/nginx/conf.d
    depends_on:
      - mapstore
      - geoserver
    networks:
      - mapstore-network

networks:
  mapstore-network:
    driver: bridge

volumes:
  pg_data:
  geoserver_data: